@model WebApplication1.Models.Room
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.HideNavbar = true;
}

<!-- Flatpickr Styles -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<link rel="stylesheet" href="@Url.Content("~/Content/booking-page.css")" />

<style>
    .flatpickr-day.disabled,
    .flatpickr-day.disabled:hover {
        background-color: #ffebee !important;
        color: #f44336 !important;
        text-decoration: line-through;
        cursor: not-allowed;
    }
</style>

<div class="booking-container">
    <header class="booking-header">
        <a href="@Url.Action("Index", "Home")" class="logo" style="text-decoration: none;">HMS</a>
    </header>

    <div class="steps">
        <div class="step done">✔</div>
        <div class="step">2</div>
        <div class="step">3</div>
    </div>

    <h1 class="booking-title">Booking Your Stay</h1>
    <p class="booking-subtitle">Please choose your check-in and check-out dates</p>

    <div class="booking-content">
        <div class="room-card">
            <img src="@Url.Content(Model.Image)" alt="Room Image" />
            <div class="room-info">
                <div class="room-name">Room @Model.RoomNumber</div>
                <div class="room-location">@(Model.RoomType?.Name)</div>
            </div>
        </div>

        <div class="booking-details">
            @using (Html.BeginForm("ShowPaymentForm", "Payment", FormMethod.Post, new { id = "bookingForm", onsubmit = "return validateBookingForm()" }))
            {
                @Html.AntiForgeryToken()

                <div class="date-inputs">
                    <div class="date-field">
                        <label for="checkin">Check-in</label>
                        <input type="text" id="checkin" name="checkin" class="date-picker" required readonly />
                    </div>
                    <div class="date-field">
                        <label for="checkout">Check-out</label>
                        <input type="text" id="checkout" name="checkout" class="date-picker" required readonly />
                    </div>
                </div>

                <div id="availability-message" class="alert" style="display: none;"></div>

                <div class="stay-display">
                    <span class="price-summary">Price per day: <strong>$@(Model.RoomType?.Cost)</strong></span><br />
                    <span id="totalPriceDisplay">&nbsp;&nbsp;Total price: <strong>$0</strong></span>
                </div>

                <input type="hidden" name="roomId" value="@Model.RoomId" />
                <input type="hidden" id="BookingAmount" name="totalPrice" />

                <div class="booking-actions">
                    <a class="btn-secondary" href="@Url.Action("Details", "Room", new { id = Model.RoomId })">Cancel</a>
                    <button type="submit" class="btn-primary" id="submitButton">Next Step</button>
                </div>
            }
        </div>
    </div>
</div>

<!-- Flatpickr Script -->
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

<script>
    const disabledDates = @Html.Raw(Json.Encode(ViewBag.DisabledDates ?? new List<string>()));
    const pricePerDay = @(Model.RoomType?.Cost ?? 0);
    const roomId = @Model.RoomId;

    const checkinInput = document.getElementById("checkin");
    const checkoutInput = document.getElementById("checkout");
    const totalPriceDisplay = document.getElementById("totalPriceDisplay");
    const totalPriceInput = document.getElementById("BookingAmount");
    const availabilityMessage = document.getElementById("availability-message");
    const submitButton = document.getElementById("submitButton");

    let isRoomAvailable = true;

    function showAvailabilityMessage(isAvailable, message) {
        availabilityMessage.style.display = "block";
        availabilityMessage.className = isAvailable ? "alert alert-success" : "alert alert-danger";
        availabilityMessage.textContent = message;
        submitButton.disabled = !isAvailable;
        isRoomAvailable = isAvailable;
    }

    // Hàm kiểm tra xem một ngày có bị vô hiệu hóa không
    function isDateDisabled(date) {
        const dateString = flatpickr.formatDate(date, "d/m/Y");
        return disabledDates.includes(dateString);
    }

    // Hàm kiểm tra xem một khoảng thời gian có hợp lệ không
    function isDateRangeValid(startDate, endDate) {
        if (!startDate || !endDate || startDate >= endDate) return false;

        // Chuyển đổi ngày thành timestamp để so sánh
        const startTime = startDate.getTime();
        const endTime = endDate.getTime();
        
        // Kiểm tra từng ngày trong khoảng
        for (let date = startTime; date <= endTime; date += 86400000) {
            if (isDateDisabled(new Date(date))) {
                return false;
            }
        }
        return true;
    }

    // Cấu hình chung cho flatpickr
    const commonConfig = {
        dateFormat: "d/m/Y",
        minDate: "today",
        disable: [
            function(date) {
                return isDateDisabled(date);
            }
        ],
        onChange: function(selectedDates, dateStr, instance) {
            calculateTotalPrice();
            updateAvailabilityMessage();
        }
    };

    // Hàm cập nhật thông báo tính khả dụng
    function updateAvailabilityMessage() {
        const checkinDate = checkinPicker.selectedDates[0];
        const checkoutDate = checkoutPicker.selectedDates[0];

        if (checkinDate && checkoutDate) {
            const isValid = isDateRangeValid(checkinDate, checkoutDate);
            showAvailabilityMessage(
                isValid,
                isValid ? "Selected dates are available!" : "Some dates in this range are not available."
            );
        }
    }

    // Cấu hình cho check-in date
    const checkinPicker = flatpickr("#checkin", {
        ...commonConfig,
        onChange: function(selectedDates, dateStr) {
            const selectedDate = selectedDates[0];
            if (selectedDate) {
                // Cập nhật ngày tối thiểu cho checkout
                checkoutPicker.set("minDate", dateStr);
                
                // Reset checkout nếu ngày check-out hiện tại nhỏ hơn hoặc bằng ngày check-in mới
                const checkoutDate = checkoutPicker.selectedDates[0];
                if (checkoutDate && checkoutDate <= selectedDate) {
                    checkoutPicker.clear();
                }
            }
            calculateTotalPrice();
            updateAvailabilityMessage();
        }
    });

    // Cấu hình cho check-out date
    const checkoutPicker = flatpickr("#checkout", {
        ...commonConfig,
        onChange: function(selectedDates, dateStr) {
            calculateTotalPrice();
            updateAvailabilityMessage();
        }
    });

    function calculateTotalPrice() {
        if (!checkinInput.value || !checkoutInput.value) {
            totalPriceDisplay.innerHTML = "&nbsp;&nbsp;Total price: <strong>$0</strong>";
            totalPriceInput.value = "0";
            return;
        }

        const checkinDate = flatpickr.parseDate(checkinInput.value, "d/m/Y");
        const checkoutDate = flatpickr.parseDate(checkoutInput.value, "d/m/Y");
        
        if (!checkinDate || !checkoutDate || checkinDate >= checkoutDate) {
            totalPriceDisplay.innerHTML = "&nbsp;&nbsp;Total price: <strong>$0</strong>";
            totalPriceInput.value = "0";
            return;
        }

        const days = Math.ceil((checkoutDate - checkinDate) / (1000 * 60 * 60 * 24));
        const total = days * pricePerDay;
        
        totalPriceDisplay.innerHTML = `&nbsp;&nbsp;Total price: <strong>$${total}</strong>`;
        totalPriceInput.value = total.toString();
    }

    function validateBookingForm() {
        if (!checkinInput.value || !checkoutInput.value) {
            alert("Please select check-in and check-out dates.");
            return false;
        }

        if (!isRoomAvailable) {
            alert("This room is not available for the selected dates. Please choose different dates.");
            return false;
        }

        const checkinDate = flatpickr.parseDate(checkinInput.value, "d/m/Y");
        const checkoutDate = flatpickr.parseDate(checkoutInput.value, "d/m/Y");

        if (!checkinDate || !checkoutDate) {
            alert("Invalid dates selected.");
            return false;
        }

        if (checkinDate >= checkoutDate) {
            alert("Check-out date must be after check-in date.");
            return false;
        }

        if (!isDateRangeValid(checkinDate, checkoutDate)) {
            alert("Selected date range includes unavailable dates. Please choose different dates.");
            return false;
        }

        return true;
    }
</script>
